@model WebApplication1.Models.BaseModel

@{
    ViewData["Title"] = "Фильтрация данных";
    var videoId = Model.YoutubeURL;
}

<style>
    .container {
        display: flex;
        gap: 20px;
        align-items: flex-start;
        margin: 0 auto;
    }

    .filters {
        flex: 1;
    }

    .filters, .sidebar {
        padding: 10px;
        margin: 0;
    }

    .sidebar {
        flex: 2;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        gap: 20px;
    }

    iframe {
        width: 100%;
        height: 100%;
        min-height: 400px;
        aspect-ratio: 16 / 9;
    }

    .video-container {
        width: 100%;
        max-width: 100%;
        height: auto;
        position: relative;
    }

        .video-container iframe {
            width: 100%;
            height: auto;
        }

    .listbox {
        width: 100%;
        height: 200px;
        border: 1px solid #ccc;
        overflow-y: auto;
        padding: 10px;
        text-align: center;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    th {
        background-color: #f4f4f4;
    }

    .multi-select {
        width: 100%;
        height: auto;
        min-height: 35px;
        padding: 5px;
        cursor: pointer;
        font-size: 14px;
    }

        .multi-select select {
            display: none;
            width: 100%;
            padding: 5px;
            font-size: 14px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

    .dropdown-container {
        position: relative;
        width: 100%;
    }

    .dropdown-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 5px;
        background-color: #f4f4f4;
        cursor: pointer;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: white;
        border: 1px solid #ddd;
        z-index: 1;
    }

    .dropdown-container.active .dropdown-content {
        display: block;
    }

    .dropdown-content option {
        padding: 5px;
        cursor: pointer;
    }

        .dropdown-content option:hover {
            background-color: #f1f1f1;
        }

    .dropdown-content {
        max-height: none;
    }

    .dropdown-content {
        padding: 5px;
    }

    .apply-button {
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .apply-button:hover {
            background-color: #0056b3;
        }

    /* Новый стиль для выделения выбранного таймкода */
    .selected {
        background-color: #007bff;
        color: white;
        font-weight: bold;
    }
</style>

<div class="container">
    <div class="filters">
        @if (Model != null)
        {
            <h2>Выберите фильтры</h2>
            <form method="post" action="/GameViewer/UseFilters">
                @foreach (var actionTypeFilter in Model.Filters)
                {
                    @if (actionTypeFilter.ActionType != "Player")
                    {
                        <label>
                            <input type="checkbox" class="filter-checkbox" name="@($"CheckBox${actionTypeFilter.ActionType}")" checked />
                            @actionTypeFilter.ActionType
                        </label>
                    }
                    <table>
                        <thead>
                            <tr>
                                <th>Фильтр</th>
                                <th>Выбор</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var filter in actionTypeFilter.Filters)
                            {
                                <tr>
                                    <td>@filter.Name</td>
                                    <td>
                                        <div class="dropdown-container">
                                            <div class="dropdown-header">
                                                <span>Выберите...</span>
                                                <span>&#x25BC;</span>
                                            </div>
                                            <div class="dropdown-content">
                                                <select multiple class="multi-select" name="@($"ComboBox${actionTypeFilter.ActionType}${filter.Name}")">
                                                    @for (int i = 0; i < filter.Options.Count; i++)
                                                    {
                                                        <option value="@filter.Options[i]">@filter.Options[i]</option>
                                                    }
                                                </select>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                <button type="submit" class="apply-button">Применить фильтры</button>
            </form>
        }
    </div>

    <div class="sidebar">
        <h3>Видео</h3>
        <div class="video-container">
            <iframe id="youtube-player"
                    src="https://www.youtube.com/embed/@videoId?enablejsapi=1"
                    frameborder="0" allowfullscreen>
            </iframe>
        </div>
        <h3>Результаты</h3>
        <div class="listbox" id="filteredItems">
            <p>Здесь будут отображаться результаты</p>
            @if (Model != null && Model.TimedData != null)
            {
                <ul>
                    @foreach (var item in Model.TimedData)
                    {
                        <li data-timestamp="@item.TimeCode" class="timed-item">@item.Description - @item.TimeCode</li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

<script>
    var player;
    var timedItems = document.querySelectorAll('.timed-item');
    var timeCodes = Array.from(timedItems).map(item => parseFloat(item.getAttribute('data-timestamp')));
    var currentIndex = 0;

    function loadYouTubeAPI() {
        var tag = document.createElement("script");
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName("script")[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }

    function onYouTubeIframeAPIReady() {
        player = new YT.Player('youtube-player', {
            events: {
                'onReady': onPlayerReady
            }
        });
    }

    function onPlayerReady(event) {
        console.log("YouTube Player is ready");

        timedItems.forEach(function (item) {
            item.addEventListener('click', function () {
                var timeCode = parseFloat(item.getAttribute('data-timestamp'));
                player.seekTo(timeCode, true);

                // Снимаем класс 'selected' с всех элементов
                timedItems.forEach(function (timedItem) {
                    timedItem.classList.remove('selected');
                });

                // Добавляем класс 'selected' к текущему элементу
                item.classList.add('selected');
            });
        });
    }

    loadYouTubeAPI();

    // Переключение между таймкодами с помощью клавиш
    document.addEventListener('keydown', function (event) {
        if (event.ctrlKey && event.shiftKey && event.key === 'ArrowRight') {
            // Следующий таймкод
            currentIndex = (currentIndex + 1) % timeCodes.length;
            var nextTimeCode = timeCodes[currentIndex];
            if (player) {
                player.seekTo(nextTimeCode - 4, true);
            }

            // Обновляем визуально выделенный таймкод
            var selectedItem = Array.from(timedItems).find(item => parseFloat(item.getAttribute('data-timestamp')) === nextTimeCode);

            // Снимаем класс 'selected' с всех элементов
            timedItems.forEach(function (timedItem) {
                timedItem.classList.remove('selected');
            });

            // Добавляем класс 'selected' к текущему элементу
            if (selectedItem) {
                selectedItem.classList.add('selected');
                scrollIntoView(selectedItem);
            }
        } else if (event.ctrlKey && event.shiftKey && event.key === 'ArrowLeft') {
            // Предыдущий таймкод
            currentIndex = (currentIndex - 1 + timeCodes.length) % timeCodes.length;
            var prevTimeCode = timeCodes[currentIndex];
            if (player) {
                player.seekTo(prevTimeCode - 4, true);
            }

            // Обновляем визуально выделенный таймкод
            var selectedItem = Array.from(timedItems).find(item => parseFloat(item.getAttribute('data-timestamp')) === prevTimeCode);

            // Снимаем класс 'selected' с всех элементов
            timedItems.forEach(function (timedItem) {
                timedItem.classList.remove('selected');
            });

            // Добавляем класс 'selected' к текущему элементу
            if (selectedItem) {
                selectedItem.classList.add('selected');
                scrollIntoView(selectedItem);
            }
        }
        else if (event.ctrlKey && event.shiftKey && event.key === 'ArrowUp') {
            var prevTimeCode = timeCodes[currentIndex];
            if (player) {
                player.seekTo(prevTimeCode - 4, true);
            }
        }
    });

    function scrollIntoView(item) {
        // Прокручиваем listbox так, чтобы выбранный элемент был видим
        const listbox = document.getElementById('filteredItems');
        const rect = item.getBoundingClientRect();
        const listboxRect = listbox.getBoundingClientRect();

        if (rect.top < listboxRect.top) {
            listbox.scrollTop -= (listboxRect.top - rect.top);
        } else if (rect.bottom > listboxRect.bottom) {
            listbox.scrollTop += (rect.bottom - listboxRect.bottom);
        }
    }

    // Добавляем обработчик кликов для открытия/закрытия выпадающего списка
    const dropdownHeaders = document.querySelectorAll('.dropdown-header');
    dropdownHeaders.forEach(header => {
        header.addEventListener('click', () => {
            const container = header.closest('.dropdown-container');
            container.classList.toggle('active');
        });
    });

    // Обработчик изменения выбранных опций
    const multiSelects = document.querySelectorAll('.multi-select');
    multiSelects.forEach(select => {
        select.addEventListener('change', () => {
            const selectedOptions = Array.from(select.selectedOptions);
            const selectedValues = selectedOptions.map(option => option.value);
            const dropdownHeader = select.closest('.dropdown-container').querySelector('.dropdown-header span');
            if (selectedValues.length > 0) {
                dropdownHeader.textContent = selectedValues.join(', ');
            } else {
                dropdownHeader.textContent = 'Выберите...';
            }
        });
    });
</script>
